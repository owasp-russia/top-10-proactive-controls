# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, OWASP Foundation
# This file is distributed under the same license as the OWASP Proactive Controls package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OWASP Proactive Controls\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-16 12:09+0300\n"
"PO-Revision-Date: 2019-01-16 10:21+0000\n"
"Language-Team: Russian (Russia) (https://www.transifex.com/owasp/teams/95217/ru_RU/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru_RU\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

# e5487e0ecffa4b799d0645c940b4254f
#: ../../c5-validate-all-inputs.md:1
msgid "C5: Validate All Inputs"
msgstr ""

# 23d617fd02eb43b28960d4e82e65abea
#: ../../c5-validate-all-inputs.md:3
msgid "Description"
msgstr ""

# c2d304d10e494867a4675a40f546d43e
#: ../../c5-validate-all-inputs.md:5
msgid ""
"Input validation is a programming technique that ensures only properly "
"formatted data may enter a software system component."
msgstr ""

# 8409bfb9cb3645d180a05891fba0d1ff
#: ../../c5-validate-all-inputs.md:7
msgid "Syntax and Semantic Validity"
msgstr ""

# 56c561b8656a45989c776ff494cd7eb0
#: ../../c5-validate-all-inputs.md:9
msgid ""
"An application should check that data is both syntactically and semantically"
" valid (in that order) before using it in any way (including displaying it "
"back to the user)."
msgstr ""

# 38773ff2d4984b57ad7e28451c5bc35b
#: ../../c5-validate-all-inputs.md:11
msgid ""
"Syntax validity means that the data is in the form that is expected. For "
"example, an application may allow a user to select a four-digit \"account "
"ID\" to perform some kind of operation. The application should assume the "
"user is entering a SQL injection payload, and should check that the data "
"entered by the user is exactly four digits in length, and consists only of "
"numbers (in addition to utilizing proper query parameterization)."
msgstr ""

# 875c6096621f4c0b8531943b7ad2d5ef
#: ../../c5-validate-all-inputs.md:13
msgid ""
"Semantic validity includes only accepting input that is within an acceptable"
" range for the given application functionality and context. For example, a "
"start date must be before an end date when choosing date ranges."
msgstr ""

# eff4ffb5459b45359314231f7a7f5e5f
#: ../../c5-validate-all-inputs.md:15
msgid "Whitelisting vs Blacklisting"
msgstr ""

# f77dbbfe7eea4759b7b7f6bc607ac5f0
#: ../../c5-validate-all-inputs.md:17
msgid ""
"There are two general approaches to performing input syntax validation, "
"commonly known as blacklisting and whitelisting:"
msgstr ""

# ea0cf67068a649e7a27528e796160cba
#: ../../c5-validate-all-inputs.md:19
msgid ""
"Blacklisting or blacklist validation attempts to check that given data does "
"not contain \"known bad\" content. For example, a web application may block "
"input that contains the exact text  in order to help prevent XSS. However, "
"this defense could be evaded with a lower case script tag or a script tag of"
" mixed case."
msgstr ""

# e61629d6d7f5409e9adebda154be0892
#: ../../c5-validate-all-inputs.md:20
msgid ""
"Whitelisting or whitelist validation attempts to check that a given data "
"matches a set of \"known good\" rules. For example a whitelist validation "
"rule for a US state would be a 2-letter code that is only one of the valid "
"US states."
msgstr ""

# 076b59c86fbd49988f198efc73b2b8aa
#: ../../c5-validate-all-inputs.md:22
msgid ""
"When building secure software, whitelisting is the recommended minimal "
"approach. Blacklisting is prone to error and can be bypassed with various "
"evasion techniques and can be dangerous when depended on by itself. Even "
"though blacklisting can often be evaded it can often useful to help detect "
"obvious attacks. So while whitelisting helps limit the attack surface by "
"ensuring data is of the right syntactic and semantic validity, blacklisting "
"helps detect and potentially stop obvious attacks."
msgstr ""

# c144f9859cf74aefa897443cb641dfc3
#: ../../c5-validate-all-inputs.md:24
msgid "Client side and Server side Validation"
msgstr ""

# ae22a67fcd474afe90f352d134d46272
#: ../../c5-validate-all-inputs.md:26
msgid ""
"Input validation must always be done on the server-side for security. While "
"client side validation can be useful for both functional and some security "
"purposes it can often be easily bypassed. This makes server-side validation "
"even more fundamental to security. For example, JavaScript validation may "
"alert the user that a particular field must consist of numbers but the "
"server side application must validate that the submitted data only consists "
"of numbers in the appropriate numerical range for that feature."
msgstr ""

# 67d277cc0fa844d2bf51c48070031ddd
#: ../../c5-validate-all-inputs.md:28
msgid "Regular Expressions"
msgstr ""

# 64b49dd5a0ec49dd9d797f6c67d192d0
#: ../../c5-validate-all-inputs.md:30
msgid ""
"Regular expressions offer a way to check whether data matches a specific "
"pattern. Letâ€™s start with a basic example."
msgstr ""

# 15e5bb3083ba4b38a2d1b99e839e9ff3
#: ../../c5-validate-all-inputs.md:32
msgid ""
"The following regular expression is used to define a whitelist rule to "
"validate usernames."
msgstr ""

# 0b7b7720c56244f387c783ea26f8cd2b
#: ../../c5-validate-all-inputs.md:38
msgid ""
"This regular expression allows only lowercase letters, numbers and the "
"underscore character. The username is also restricted to a length of 3 and "
"16 characters."
msgstr ""

# 9f335556529e4faaa13f1c12c5bec923
#: ../../c5-validate-all-inputs.md:40
msgid "Caution: Potential for Denial of Service"
msgstr ""

# c5ba3315d5e24bdba6428eb2abf98767
#: ../../c5-validate-all-inputs.md:42
msgid ""
"Care should be exercised when creating regular expressions. Poorly designed "
"expressions may result in potential denial of service conditions (aka "
"ReDoS). Various tools can test to verify that regular expressions are not "
"vulnerable to ReDoS."
msgstr ""

# 199c5b77cf9f44e79acc481cb303992d
#: ../../c5-validate-all-inputs.md:44
msgid "Caution: Complexity"
msgstr ""

# 20a74b3c0d704ae1934eee380bbd327a
#: ../../c5-validate-all-inputs.md:46
msgid ""
"Regular expressions are just one way to accomplish validation. Regular "
"expressions can be difficult to maintain or understand for some developers. "
"Other validation alternatives involve writing validation methods "
"programmatically which can be easier to maintain for some developers."
msgstr ""

# ad066307e78c47a4ab418d84aa13cba5
#: ../../c5-validate-all-inputs.md:49
msgid "Limits of Input Validation"
msgstr ""

# 82a0a76238b64637923de23d014542b3
#: ../../c5-validate-all-inputs.md:51
msgid ""
"Input validation does not always make data \"safe\" since certain forms of "
"complex input may be \"valid\" but still dangerous. For example a valid "
"email address may contain a SQL injection attack or a valid URL may contain "
"a Cross Site Scripting attack. Additional defenses besides input validation "
"should always be applied to data such as query parameterization or escaping."
msgstr ""

# 01d093b06d844edf8ec7130d1855c829
#: ../../c5-validate-all-inputs.md:53
msgid "Challenges of Validating Serialized Data"
msgstr ""

# 3db400ffda494b3c9086e5e4c66451dc
#: ../../c5-validate-all-inputs.md:55
msgid ""
"Some forms of input are so complex that validation can only minimally "
"protect the application. For example, it's dangerous to deserialize "
"untrusted data or data that can be manipulated by an attacker. The only safe"
" architectural pattern is to not accept serialized objects from untrusted "
"sources or to only deserialize in limited capacity for only simple data "
"types. You should avoid processing serialized data formats and use easier to"
" defend formats such as JSON when possible."
msgstr ""

# 5cc5fce50cf64beeb2f8fdf2f6042d87
#: ../../c5-validate-all-inputs.md:57
msgid ""
"If that is not possible then consider a series of validation defenses when "
"processing serialized data."
msgstr ""

# f6198991c2684d22bc1185120639d323
#: ../../c5-validate-all-inputs.md:59
msgid ""
"Implement integrity checks or encryption of the serialized objects to "
"prevent hostile object creation or data tampering."
msgstr ""

# 2b1ed2d323fb463d8687aa5daf45bbfd
#: ../../c5-validate-all-inputs.md:60
msgid ""
"Enforce strict type constraints during deserialization before object "
"creation; typically code is expecting a definable set of classes. Bypasses "
"to this technique have been demonstrated."
msgstr ""

# 6c51661bf56448fea8494f971fe2bd5c
#: ../../c5-validate-all-inputs.md:61
msgid ""
"Isolate code that deserializes, such that it runs in very low privilege "
"environments, such as temporary containers."
msgstr ""

# cc5c30cdc2e0413c890a95c39cb7a27d
#: ../../c5-validate-all-inputs.md:62
msgid ""
"Log security deserialization exceptions and failures, such as where the "
"incoming type is not the expected type, or the deserialization throws "
"exceptions."
msgstr ""

# 81c960d3e7454332ab36980af29eebf5
#: ../../c5-validate-all-inputs.md:63
msgid ""
"Restrict or monitor incoming and outgoing network connectivity from "
"containers or servers that deserialize."
msgstr ""

# 732f1e6005274921a13fa2c56a13cbde
#: ../../c5-validate-all-inputs.md:64
msgid "Monitor deserialization, alerting if a user deserializes constantly."
msgstr ""

# 69b4b2718935463cac39e7b33b4dfd85
#: ../../c5-validate-all-inputs.md:67
msgid "Unexpected User Input (Mass Assignment)"
msgstr ""

# 1f7bf57a2cae470fb466082f92506548
#: ../../c5-validate-all-inputs.md:69
msgid ""
"Some frameworks support automatic binding of HTTP requests parameters to "
"server-side objects used by the application. This auto-binding feature can "
"allow an attacker to update server-side objects that were not meant to be "
"modified. The attacker can possibly modify their access control level or "
"circumvent the intended business logic of the application with this feature."
msgstr ""

# 5707126f61ee4240b015ccf8aba1f686
#: ../../c5-validate-all-inputs.md:71
msgid ""
"This attack has a number of names including: mass assignment, autobinding "
"and object injection."
msgstr ""

# 27f078e2d4684e5f825e642af9449a7c
#: ../../c5-validate-all-inputs.md:73
msgid ""
"As a simple example, if the user object has a field privilege which "
"specifies the user's privilege level in the application, a malicious user "
"can look for pages where user data is modified and add privilege=admin to "
"the HTTP parameters sent.  If auto-binding is enabled in an insecure "
"fashion, the server-side object representing the user will be modified "
"accordingly."
msgstr ""

# 1ea23ba6a876495fb19d2480db487018
#: ../../c5-validate-all-inputs.md:75
msgid "Two approaches can be used to handle this:"
msgstr ""

# b63f4d2cecd24bcba52638a52b8a8c3b
#: ../../c5-validate-all-inputs.md:77
msgid ""
"Avoid binding input directly and use Data Transfer Objects (DTOs) instead."
msgstr ""

# ab976f839153457a85f24507cfc94447
#: ../../c5-validate-all-inputs.md:78
msgid ""
"Enable auto-binding but set up whitelist rules for each page or feature to "
"define which fields are allowed to be auto-bound."
msgstr ""

# 9882d7399b0844abbbcb53600d5b7262
#: ../../c5-validate-all-inputs.md:80
msgid "More examples are available in the OWASP Mass Assignment Cheat Sheet."
msgstr ""

# 8a0db2a80bdd4d9bb13f221b9ae92b39
#: ../../c5-validate-all-inputs.md:82
msgid "Validating and Sanitizing HTML"
msgstr ""

# 9efdee922848420eac6f560041f8e3c1
#: ../../c5-validate-all-inputs.md:84
msgid ""
"Consider an application that needs to accept HTML from users (via a WYSIWYG "
"editor that represents content as HTML or features that directly accept HTML"
" in input). In this situation validation or escaping will not help."
msgstr ""

# a815bf501962413f9d04829dee4be2d1
#: ../../c5-validate-all-inputs.md:86
msgid ""
"Regular expressions are not expressive enough to understand the complexity "
"of HTML5."
msgstr ""

# 72a5cd48c3514e03acf991c3693883bc
#: ../../c5-validate-all-inputs.md:87
msgid ""
"Encoding or escaping HTML will not help since it will cause the HTML to not "
"render properly."
msgstr ""

# 2fbfc3ac2dfe419880c6f5b03bced8b6
#: ../../c5-validate-all-inputs.md:89
msgid ""
"Therefore, you need a library that can parse and clean HTML formatted text. "
"Please see the XSS Prevention Cheat Sheet on HTML Sanitization for more "
"information on HTML Sanitization."
msgstr ""

# 5cc7c7017e394d218a905d921b8e3b09
#: ../../c5-validate-all-inputs.md:91
msgid "Validation Functionality in Libraries and Frameworks"
msgstr ""

# 6a26203ed5eb4e17a72c219571fe24ef
#: ../../c5-validate-all-inputs.md:93
msgid ""
"All languages and most frameworks provide validation libraries or functions "
"which should be leveraged to validate data. Validation libraries typically "
"cover common data types, length requirements, integer ranges, \"is null\" "
"checks and more. Many validation libraries and frameworks allow you to "
"define your own regular expression or logic for custom validation in a way "
"that allows the programmer to leverage that functionality throughout your "
"application. Examples of validation functionality include PHPâ€™s filter "
"functions or the Hibernate Validator for Java. Examples of HTML Sanitizers "
"include Ruby on Rails sanitize method, OWASP Java HTML Sanitizer or "
"DOMPurify."
msgstr ""

# a701caa982d54c299092bf20087dd1b8
#: ../../c5-validate-all-inputs.md:95
msgid "Vulnerabilities Prevented"
msgstr ""

# e43afb186ab04ea28117325ceffa028f
#: ../../c5-validate-all-inputs.md:97
msgid ""
"Input validation reduces the attack surface of applications and can "
"sometimes make attacks more difficult against an application."
msgstr ""

# 25b551e3710a4ccaaaf7092d01080f9e
#: ../../c5-validate-all-inputs.md:98
msgid ""
"Input validation is a technique that provides security to certain forms of "
"data, specific to certain attacks and cannot be reliably applied as a "
"general security rule."
msgstr ""

# 98b10603b2d84191a7d62570039dd861
#: ../../c5-validate-all-inputs.md:99
msgid ""
"Input validation should not be used as the primary method of preventing XSS,"
" SQL Injection and other attacks."
msgstr ""

# 8a414eb67fdb4975aa0e9350a82e3955
#: ../../c5-validate-all-inputs.md:101
msgid "References"
msgstr ""

# 51c17ef307c848a3987e73fca20caab8
#: ../../c5-validate-all-inputs.md:103
msgid "OWASP Cheat Sheet: Input Validation"
msgstr ""

# 60c41c6b170246ab83e42861d8e30f6c
#: ../../c5-validate-all-inputs.md:104
msgid "OWASP Cheat Sheet: iOS - Security Decisions via Untrusted Inputs"
msgstr ""

# 2a2468e5cd7744d89423049e40e5501d
#: ../../c5-validate-all-inputs.md:105
msgid "OWASP Testing Guide: Testing for Input Validation"
msgstr ""

# f931da18b6d84eb7841aecb93dd1f10c
#: ../../c5-validate-all-inputs.md:107
msgid "Tools"
msgstr ""

# 41c07b5a92364dc9b8dcad42ce4dfc99
#: ../../c5-validate-all-inputs.md:109
msgid "OWASP Java HTML Sanitizer Project"
msgstr ""

# 81f22da85bc64b21913c1d6fe5468f84
#: ../../c5-validate-all-inputs.md:110
msgid "Java JSR-303/JSR-349 Bean Validation"
msgstr ""

# 217ab7880c5140818699a2e0d429aa45
#: ../../c5-validate-all-inputs.md:111
msgid "Java Hibernate Validator"
msgstr ""

# 04d3952f922042449ecde64585df6885
#: ../../c5-validate-all-inputs.md:112
msgid "JEP-290 Filter Incoming Serialization Data"
msgstr ""

# 52e28c0212494a55b56794ce93fe8f2f
#: ../../c5-validate-all-inputs.md:113
msgid "Apache Commons Validator"
msgstr ""

# a02a75859f96483ab65dcb93895da2a3
#: ../../c5-validate-all-inputs.md:114
msgid "PHPâ€™s filter functions"
msgstr ""
